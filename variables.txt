Variables   
    variables are containers that store the data used in program. Python is dynamically types language so you dont need to explicitly provide the data type of a variable.

-------------------------------------------------------------------------------
Creating and using Variable
    age = 38
    name = "Ankit"
    weight = 58.5

    print(age)		# Output: 38
    print(name)		# Output: Ankit
    print(weight)	# Output: 58.5

Using Variables in Computations
    Variables can also be used in computations. For example:
        price = 100
        tax = 18
        total_price = price + tax

        print(total_price) 	# Output: 118

-------------------------------------------------------------------------------
How Variables Work Internally
    When you assign a value to a variable, a memory location is created to store the value, and the variable becomes a reference (or label) to that memory location. For example:
    x = 10
    y = "geek"
    z = 20
    w = z

    print(x, y, z, w)	# Output: 10 geek 20 20
-------------------------------------------------------------------------------
Dynamically Typed Nature of Python
    In Python, variables do not have fixed types. You can assign different types of data to the same variable:    
    x = 10
    print(x)	# Output: 10

    x = "Python"
    print(x)	# Output: Python

-------------------------------------------------------------------------------
Boolean Variables
    Variables can also store Boolean values (True or False):
        is_valid = True
        is_published = False

        print(is_valid)			# Output: True
        print(is_published)		# Output: False

-------------------------------------------------------------------------------
Swapping two variables in Python
    Swapping variables means exchanging their values. For example, if x = 100 and y = 20, after swapping, x should be 20, and y should be 100.
    Python provides a concise way to swap variables using tuple unpacking:
        x = 100
        y = 200

        # Pythonic swapping
        x, y = y, x
    
Assigning Multiple Values to Multiple Variables
    Tuple unpacking can also be used to assign multiple values to multiple variables at once:
        x, y, z = 100, "Geeks", 10.5

        print(x)  # Output: 100
        print(y)  # Output: Geeks
        print(z)  # Output: 10.5

-------------------------------------------------------------------------------
ID() Function
    The id() function in Python is a built-in function that provides a unique identifier for every object. This identifier helps in understanding how objects are stored and referenced in memory.

    Basic Example of id()
    Consider the following example to understand the id() function:
        print(id(5))  # Unique identifier for the object with value 5
        a = 10
        print(id(a))  # Unique identifier for the object with value 10 
        b = a
        print(id(b))  # Same identifier as a because both refer to the same object

    The id() function gives the unique identifier of an object, not the variable. For example:
        a = 10
        b = 10
        print(id(a))  # Identifier for the object with value 10
        print(id(b))  # Same identifier as a because a and b refer to the same object

-------------------------------------------------------------------------------
Type() Function
    The type() function returns the type of an object or variable.
    a = 10
    print(type(a))	# Output: <class 'int'>
    
    c = 2 + 4j
    print(type(c))	# Output: <class 'complex'>

    Sequence Types in Python
    Python offers several sequence types, such as strings, lists, tuples, sets, and dictionaries. Each type can be identified using the type() function.
        g = [1, 2, 3]
        print(type(g)) # Output: <class 'list'>
