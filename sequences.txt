Lists
    A list is a collection of items that can hold multiple values of different data types. Lists are created using square brackets [], and the items are separated by commas. For example:
        a = [10, 20, 30, 40, 50]
        print(a[0])

    Accessing List Items
        You can access list items using their index, which starts at 0 for the first item. Python also supports negative indexing, where -1 refers to the last item, -2 to the second last, and so on.        
            a = [10, 20, 30, 40, 50]
            print(a)	  # Output: [10, 20, 30, 40, 50]
            print(a[3])   # Output: 40
            print(a[-1])  # Output: 50
            print(a[-2])  # Output: 40

    Modifying Lists
        The append() function adds an item to the end of the list.
            a.append(80)
            print(a)
        
        The insert() function inserts an item at a specified position.
            a.insert(2,22)
            print(a)
        
        You can check if an item exists in a list using the in operator.
            print(15 in a)  # Output: True
            print(16 in a)  # Output: False

        The count() function returns the number of times an item appears in the list.
            print(a.count(1))

        The index() function returns the first occurrence of an item in the list.
            print(a.index(30))
        
        The pop() function removes and returns the last item by default, or the item at a specified index.
            print(a.pop())
            print(a.pop(2))
        
        The del keyword removes the item at a specified index or a range of indexes.
            del a[1]
            print(a)	# Output: [10, 40, 50]
        
        The max(), min(), and sum() functions return the maximum, minimum, and sum of the list items, respectively.
            b = [10, 20, 30, 40, 50]
            print(max(b))  # Output: 50
            print(min(b))  # Output: 10
            print(sum(b))  # Output: 150
        
        The reverse() function reverses the order of the list.
            b.reverse()
            print(b)	# Output: [50, 40, 30, 20, 10]

        The sort() function sorts the list in ascending order by default.
            b.sort()
            print(b)	# Output: [10, 20, 30, 40, 50]

------------------------------------------------------------------------------
tuples
    A tuple is a collection of items that are ordered and unchangeable. Tuples are defined by enclosing the items in parentheses (). Each item in the tuple is separated by a comma.
        my_tuple = (10, 20, 'geek')

    Key Characteristics of Tuples
        1. Ordered: Tuples maintain the order of items. If you create a tuple with items 10, 20, 'geek', accessing the tuple will always return items in that order.
        2. Indexed: You can access items in a tuple by referring to their index, similar to lists. The index starts from 0.
    
        print(my_tuple[0])  # Output: 10
        print(my_tuple[2])  # Output: geek
            
    Immutable: Unlike lists, tuples cannot be changed after they are created. You cannot add, remove, or modify items in a tuple.
        my_tuple[0] = 30  # This will raise an error
    
    Why Use Tuples?
        Faster than lists: Accessing and processing tuples is generally faster than lists.
        Fixed collections: Tuples are ideal for representing fixed collections of items, such as days of the week or user access levels.
        Memory-efficient: Tuples take up less memory compared to lists.

    Creating Tuples
        Tuples can be created with or without parentheses. However, to create a single-item tuple, a comma must follow the item.
            # With parentheses
            a = (10, 20, 'geek')

            # Without parentheses
            a = 10, 20, 'geek'

            # Single-item tuple
            b = (10,)
    
    Accessing Tuple Items
        You can access items using positive or negative indexes. Positive indexes start from 0, while negative indexes start from -1 for the last item.
            print(a[1])    # Output: 20
            print(a[-1])   # Output: geek
    
    Tuple Functions
        Tuples support several functions similar to lists, but they do not support functions that modify their content.

        Length: Returns the number of items in the tuple.
            print(len(a))  # Output: 3

        Count: Returns the number of times a specified item appears in the tuple.
            print(a.count(10))  # Output: 1
        
        Index: Returns the index of the first occurrence of a specified item.
            print(a.index(10))
        
    Handling Mixed Data Types
        Tuples can contain mixed data types, including integers, strings, and even other tuples.
            nested_tuple = (10, 'geek', (1, 2, 3))
            print(nested_tuple[2])        # Output: (1, 2, 3)
            print(nested_tuple[2][1])     # Output: 2

------------------------------------------------------------------------------
Sets
In Python, a set is a collection of items, similar to a list. Like lists, sets can contain items of the same type, such as all integers, or a mix of different types, like integers and strings.

However, there are key differences between sets and lists:

Distinct Items: A set only contains unique items. This means no two items in a set can be the same. For example, if you have a set s = {10, 20, 30} and try to add 20 again, the set remains unchanged.
Unordered: Sets do not maintain any particular order of items. If you add items in a specific order and then print the set, the items may appear in any order.
No Indexing: Unlike lists, sets do not support indexing. You cannot access items by their position in the set.
Why Use Sets?
Despite these differences, sets offer several advantages:

Fast Operations: Operations like union, intersection, and difference are performed quickly on sets.
Hashing: Internally, sets use hashing, which allows for fast search, insert, and delete operations.
Creating Sets in Python
You can create a set using curly braces {} or the set() constructor.

s1 = {10, 20, 30}
print(s1)			# Output: {10, 20, 30}

s2 = set([20, 30, 40])
print(s2)			# Output: {40, 20, 30}

s3 = {}
print(type(s3))		# Output: <class 'dict'>

s4 = set()
print(type(s4))  	# Output: <class 'set'>
print(s4)        	# Output: set()

Adding Elements to a Set
s = {10, 20}
s.add(30)
print(s)  		# Output: {10, 20, 30}

s.add(30)
print(s)  		# Output: {10, 20, 30}

s.update([40, 50])
print(s)  		# Output: {40, 10, 50, 20, 30}

The add() method adds a single item to the set. If the item already exists, the set remains unchanged. The update() method can add multiple items from another collection, such as a list or another set.


Removing Elements from a Set

s = {10, 30, 20, 40}
s.discard(30)
print(s)  		# Output: {10, 20, 40}

s.remove(20)
print(s)  		# Output: {40, 10}

s.clear()
print(s)  		# Output: set()

s.add(50)
del s

# After del s, accessing s will raise an error

- discard(): Removes an item if it exists. If the item is not present, it does nothing.

- remove(): Removes an item if it exists. If the item is not present, it raises an error.

- clear(): Removes all items from the set, resulting in an empty set.

- del statement: Deletes the entire set object. Attempting to access it afterward will result in an error.

Other Set Operations

s = {10, 30, 20, 40}
print(len(s))       # Output: 4
print(20 in s)      # Output: True
print(50 in s)      # Output: False

- len(): Returns the number of items in the set.

- in operator: Checks if an item is present in the set.

These operations are faster on sets compared to lists due to the underlying hashing mechanism.

Set Operations: Union, Intersection, Difference

s1 = {2, 4, 6, 8}
s2 = {3, 6, 9}

print(s1 | s2)          # Output: {2, 3, 4, 6, 8, 9}
print(s1 & s2)          # Output: {6}
print(s1 - s2)          # Output: {2, 4, 8}
print(s1 ^ s2)          # Output: {2, 3, 4, 8, 9}


- Union (|): Combines all unique elements from both sets.

- Intersection (&): Returns only the common elements between the sets.

- Difference (-): Returns elements present in the first set but not in the second.

- Symmetric Difference (^): Returns elements present in either set but not in both.

These operations can also be performed using methods like union(), intersection(), and difference().

Subset and Superset Operations

s1 = {2, 4, 6, 8}
s2 = {4, 8}

print(s1.isdisjoint(s2))  # Output: False
print(s1 <= s2)           # Output: False
print(s1 < s2)            # Output: False
print(s1 >= s2)           # Output: True
print(s1 > s2)            # Output: True

- isdisjoint(): Returns True if the two sets have no elements in common.

- Subset (<=): Checks if all elements of the first set are in the second set.

- Proper Subset (<): Similar to subset but does not allow both sets to be equal.

- Superset (>=): Checks if the first set contains all elements of the second set.

- Proper Superset (>): Similar to superset but does not allow both sets to be equal.

